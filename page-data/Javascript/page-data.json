{"componentChunkName":"component---src-templates-blog-post-js","path":"/Javascript/","result":{"data":{"site":{"siteMetadata":{"title":"VIGNESH"}},"markdownRemark":{"id":"133a932c-99d3-5589-9f21-5c54f4fd809b","excerpt":"Functions Closure Array methods Destructuring Functions In Javascript, you can do a lot more with functions. Because they are first class functions( Ya! it is a…","html":"<ul>\n<li>Functions</li>\n<li>Closure</li>\n<li>Array methods</li>\n<li>Destructuring</li>\n</ul>\n<h2>Functions</h2>\n<p>In Javascript, you can do a lot more with functions. Because they are <strong>first class functions</strong>( Ya! it is a big thing ). To put it simply, a function acts like a variable in javascript.\nIt can :</p>\n<ol>\n<li>be stored in variables.</li>\n<li>be returned from a function.</li>\n<li>be passed as arguments into another function.\nI will tell you why it is a big thing.</li>\n</ol>\n<p>I bet you have seen this thing(class) in other programming languages.</p>\n<!--\n<code>\nclass Myclass{\nconstructor(value){\nthis.value = value;\n} -->\n<p>}</p>\n<p>What exactly is a class.It is sort of like template for creating objects and can be used to create multiple instances of objects.</p>\n<p>Meaning i can do this:</p>\n<!-- <code>\nconst newValue = new Myclass(\"one\");\nconst newValue2 = new Myclass(\"two\");\nconsole.log(newValue.value) // one\nconsole.log(newValue2.value) // two\n</code> -->\n<p>Now here is how classes were written in javascript before es2016</p>\n<!--\nfunction IamClass(value){\nthis.value = value;\n// we can learn about **this** later\n}\n\nconst newValue = new IamClass(\"one\");\nconst newValue2 = new IamClass(\"two\");\nconsole.log(newValue.value) // one\nconsole.log(newValue2.value) // two -->\n<p>You see a function doesn’t neccessarily need to return anything.These types of functions is called constructor functions.</p>\n<!--\n<code>\nconst dispatch = someFunction();\n// you see you can store the return value of a function\n// you can also do this\nconst dispatch = someFunction;\nconst dispatch = someFunction()()();\n\nconst funky = (cb) => cb();\n</code> -->\n<h3>Closure</h3>\n<p>Let’s see a common example for understanding closure a little bit.\nA lot of things happen in this snippet.For understanding this snippet you need to think about the scope and the call stack.</p>\n<!--\n<code>\nfunction counter(){\nlet count = 0;\n// here we initialised a variable with a value\nreturn function countIt(){\n count = count + 1;\n // we changed the value of variable,but the resulting value depends where\n // the function is invoked.\n return count;\n }\n}\n</code> -->\n<p>By the definition of w3schools (this made more sense than others for me)\nJavaScript variables can belong to the local or global scope.</p>\n<h1>Global variables can be made local (private) with closures.</h1>\n<h3>Now let’s define a react compon$$ent and how these javascript concepts are used:</h3>\n<p><strong>sfs</strong>fsf</p>","frontmatter":{"title":"JavaScript Basics For React","date":"May 01, 2015","description":"concepts used in react"}}},"pageContext":{"slug":"/Javascript/","previous":null,"next":null}},"staticQueryHashes":["2489774933","3159585216"]}